{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Menu.svelte",
    "Player_area.svelte",
    "Shop.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport PlayerArea from './Player_area.svelte'\n\timport Menu from './Menu.svelte'\n\timport { game, players } from './store.js'\n\timport { init, send, listen } from './socket.js'\n\n\tinit();\n\n</script>\n\n<div id=\"game\">\n\t<div id=\"player\">\n\t\t{#each $players as player, i }\n\t\t\t<PlayerArea index=\"{i}\"/>\n\t\t{/each}\n\t</div>\n\t<Menu />\n</div>\n\n\n<style lang=\"scss\">h1 {\n  color: red;\n}\n\n#player {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#game {\n  max-width: 1000px;\n  width: 100%;\n  position: fixed;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n/*# sourceMappingURL=src/App.svelte.map */</style>",
    "<script>\n\nimport { game, players } from './store'\nimport { send, listen } from './socket.js'\nlet sec = $game.timer/1000;\n\nfunction timer() {\n    $game.started = true\n    $game.timer = 1000 * sec\n    $game.start_time = Date.now()\n    $game.end_time = $game.start_time + $game.timer;\n    let timer = setInterval(() => {\n        console.log(\"test\")\n        if ($game.end_time > $game.start_time) $game.start_time += 1000;\n    }, 1000);\n}\n\nfunction gameLoop() {\n    \n    listen('Update', (data) => {\n        $players[data.posID].amount = data.amount;\n    })\n\n    let GameLoop = setInterval(() => {\n        $players.forEach(e => {\n            if(e.connected)\n                send('Update', e)\n        })\n    }, 200)\n}\n\nfunction start() {\n    timer()\n    send('GameStart', $game)\n    gameLoop();\n}\n\nlisten('GameStart', (data) => {\n    console.log(data);\n    $game = data\n    \n\n    timer()\n    gameLoop()\n\n})\n\nfunction getIdOfConnected() {\n    for(let i = 0; i < $players.length; i++)\n        if($players[i].connected)\n            return i\n}\n\n</script>\n\n{#if $game.one_connected & !$game.started & getIdOfConnected() == 0}\n    <div id=\"menu\">\n        <button on:click=\"{start}\">Start game</button>\n        <input type=\"number\" placeholder=\"sec\" bind:value=\"{sec}\" min=\"1\">\n    </div>\n{/if}\n\n{#if $game.started}\n    <div id=\"timer\">\n        <h1>{($game.end_time - $game.start_time)/1000}</h1>\n    </div>\n{/if}\n\n<style lang=\"scss\">#menu {\n  display: flex;\n  padding: 10px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(0, 0, 0, 0.4);\n  flex-direction: column;\n}\n#menu button {\n  background: none;\n  border: none;\n  border-bottom: 1px solid green;\n  color: red;\n  font-size: 20px;\n}\n\n#timer {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(0, 0, 0, 0.226);\n  color: white;\n  font-size: 150%;\n}\n/*# sourceMappingURL=src/Menu.svelte.map */</style>",
    "<script>\n    import Shop from './Shop.svelte'\n    import { game, players } from './store.js'\n    import { send, listen } from './socket.js'\n    \n    export let index;\n    let username\n\n    function connect() {\n        console.log(\"username: \", username)\n        \n        send('join', {username: username, posID: index})\n        listen('join', (data) => {\n            $players[index].id = data.id\n            $players[index].connected = true\n            $players[index].name = username\n            $players[index].me = true\n            $game.one_connected = true\n\n            data.players.forEach(e => {\n                find = false\n                console.log(data.players, $players)\n                $players.forEach(el => {\n                    if(e.id == el.id) {\n                        find = true\n                    }\n                })\n                if(!find) {\n                    $players[e.posID] = Object.assign($players[e.posID], e, {not_me_connected: true})\n                    console.log(\"last: \", $players)\n                }\n            });\n        })\n        listen('NotAllowd', () => {\n            alert('That pos or thet name is uptaget')\n        })\n        listen('update_players', (data) => {\n            data.forEach(e => {\n                find = false\n                console.log(data, $players)\n                $players.forEach(el => {\n                    if(e.id == el.id) {\n                        find = true\n                    }\n                })\n                if(!find) {\n                    $players[e.posID] = Object.assign($players[e.posID], e, {not_me_connected: true})\n                    console.log(\"last: \", $players)\n                }\n            });\n        })\n    }\n\n    function clickFunction() {\n        if($players[index].connected) {\n            $players[index].amount += $players[index].aps\n        }\n    }\n\n</script>\n\n<!-- svelte-ignore a11y-img-redundant-alt -->\n<div>\n    <h1>{$players[index].name}</h1>\n    <h3>points: {$players[index].amount}</h3>\n\n    {#if $players[index].connected}\n        <img src=\"{$players[index].path}\" alt=\"click image\" on:click=\"{clickFunction}\">\n    {:else}\n        <img src=\"{$players[index].path}\" alt=\"click image\">\n    {/if}\n\n    <div class=\"shop\">\n        <Shop name=\"Upgrade1\" dis=\"This is upgrade 1\" startPrice=\"10\" modules=\"2\" aps=\"1\" playerIndex=\"{index}\"/>\n        <Shop name=\"Upgrade2\" dis=\"This is upgrade 2\" startPrice=\"400\" modules=\"1.5\" aps=\"4\" playerIndex=\"{index}\"/>\n    </div>\n\n    {#if !$game.started}\n        <div id=\"connecting\">\n            {#if !$players[index].connected}\n                {#if !$game.one_connected}\n                    <input type=\"text\" placeholder=\"name\" bind:value={username}>\n                    <button on:click=\"{connect}\">connect</button>\n                {:else if $players[index].not_me_connected}\n                    <h3 class=\"load\">this is {$players[index].name}</h3>\n                {:else}\n                    <h3 class=\"load\">Waiting for this person</h3>\n                {/if}\n            {:else  }\n                <h1 class=\"load\">hello {$players[index].name}</h1>\n                <h3 class=\"load\">Waiting on others to join</h3>\n            {/if}\n        </div>\n    {/if}\n\n</div>\n\n<style lang=\"scss\">div {\n  position: relative;\n  border: solid 1px black;\n  width: 50%;\n  height: 50vh;\n}\ndiv .shop {\n  position: absolute;\n  top: 100px;\n  height: auto;\n  border: none;\n  padding-left: 10px;\n}\ndiv #connecting {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.9);\n  text-align: center;\n  vertical-align: middle;\n}\ndiv #connecting .load {\n  color: red;\n}\ndiv img {\n  position: absolute;\n  right: 10px;\n  width: 50%;\n}\n/*# sourceMappingURL=src/Player_area.svelte.map */</style>",
    "<script>\n\timport { send, listen } from './socket.js'\n    import { players } from './store'\n    export let startPrice; \n    export let modules;\n    export let name;\n    export let dis;\n    export let aps;\n    export let playerIndex;\n    let amount = 0;\n    let price = startPrice;\n\n    function buy() {\n        console.log(\"test\")\n        if($players[playerIndex].amount >= parseInt(price)) {\n            $players[playerIndex].amount -= parseInt(price);\n            $players[playerIndex].aps += parseInt(aps);\n            price = parseInt(parseInt(price) * parseFloat(modules))\n            amount++;\n            send('ShopUpdate', { startPrice: startPrice, modules: modules, name: name, dis: dis, aps: aps, playerIndex: playerIndex, amount: amount, price: price})\n        }\n    }\n\n    listen('ShopUpdate', (data) => {\n        if(data.playerIndex == playerIndex && data.name == name) {\n            aps = data.aps;\n            amount = data.amount;\n            price = data.price;\n        }\n    })\n\n</script>\n\n<div>\n    <h3>{name} ({amount})</h3>\n    <p>{dis}</p>\n    <p>Prise: {price}, aps: {aps} <button on:click=\"{buy}\">buy</button></p>\n</div>\n\n<style lang=\"scss\">div {\n  padding: 3px;\n  padding-left: 10px;\n  border-bottom: solid 1px black;\n}\n/*# sourceMappingURL=src/Shop.svelte.map */</style>\n"
  ],
  "names": [],
  "mappings": "AAwBA,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,KAAK,CACf,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC,AAC/B,CAAC;ACiCkB,KAAK,8BAAC,CAAC,AACxB,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9B,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,oBAAK,CAAC,MAAM,eAAC,CAAC,AACZ,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAC9B,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAChC,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC;ACGkB,GAAG,4BAAC,CAAC,AACtB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACd,CAAC,AACD,iBAAG,CAAC,KAAK,cAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,IAAI,AACpB,CAAC,AACD,iBAAG,CAAC,WAAW,cAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9B,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,iBAAG,CAAC,WAAW,CAAC,KAAK,cAAC,CAAC,AACrB,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,iBAAG,CAAC,GAAG,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,GAAG,AACZ,CAAC;ACxFkB,GAAG,cAAC,CAAC,AACtB,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,AAChC,CAAC"
}